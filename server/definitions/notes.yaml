paths:
  '/Users/{id}/accessTokens/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Users/{id}/accessTokens':
    get:
      tags:
        - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/accessTokens/count':
    get:
      tags:
        - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users:
    post:
      tags:
        - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: User.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: User.replaceOrCreate__put_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
        - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  /Users/replaceOrCreate:
    post:
      tags:
        - User
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: User.replaceOrCreate__post_Users_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/upsertWithWhere:
    post:
      tags:
        - User
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: User.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - User
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: User.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'User.replaceById__put_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
        - User
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: User.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - User
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: User.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/replace':
    post:
      tags:
        - User
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'User.replaceById__post_Users_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
        - User
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: User.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Users/count:
    get:
      tags:
        - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users/login:
    post:
      tags:
        - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
        - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/verify':
    post:
      tags:
        - User
      summary: "Trigger user's identity verification with configured verifyOptions"
      operationId: User.prototype.verify
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
        - User
      summary: Confirm a user registration with identity verification token.
      operationId: User.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
        - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/change-password:
    post:
      tags:
        - User
      summary: "Change a user's password."
      operationId: User.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset-password:
    post:
      tags:
        - User
      summary: "Reset user's password via a password-reset token."
      operationId: User.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Topics/{id}/blocks/{fk}':
    get:
      tags:
        - Topic
      summary: Find a related item by id for blocks.
      operationId: Topic.prototype.__findById__blocks
      parameters:
        - name: fk
          in: path
          description: Foreign key for blocks
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Topic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
    delete:
      tags:
        - Topic
      summary: Delete a related item by id for blocks.
      operationId: Topic.prototype.__destroyById__blocks
      parameters:
        - name: fk
          in: path
          description: Foreign key for blocks
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Topic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Topic
      summary: Update a related item by id for blocks.
      operationId: Topic.prototype.__updateById__blocks
      parameters:
        - name: fk
          in: path
          description: Foreign key for blocks
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Block'
        - name: id
          in: path
          description: Topic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
  '/Topics/{id}/creator':
    get:
      tags:
        - Topic
      summary: Fetches hasOne relation creator.
      operationId: Topic.prototype.__get__creator
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Topic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    post:
      tags:
        - Topic
      summary: Creates a new instance in creator of this model.
      operationId: Topic.prototype.__create__creator
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Member'
        - name: id
          in: path
          description: Topic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    put:
      tags:
        - Topic
      summary: Update creator of this model.
      operationId: Topic.prototype.__update__creator
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Member'
        - name: id
          in: path
          description: Topic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    delete:
      tags:
        - Topic
      summary: Deletes creator of this model.
      operationId: Topic.prototype.__destroy__creator
      parameters:
        - name: id
          in: path
          description: Topic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Topics/{id}/blocks':
    get:
      tags:
        - Topic
      summary: Queries blocks of Topic.
      operationId: Topic.prototype.__get__blocks
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Topic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Block'
      deprecated: false
    post:
      tags:
        - Topic
      summary: Creates a new instance in blocks of this model.
      operationId: Topic.prototype.__create__blocks
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Block'
        - name: id
          in: path
          description: Topic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
    delete:
      tags:
        - Topic
      summary: Deletes all blocks of this model.
      operationId: Topic.prototype.__delete__blocks
      parameters:
        - name: id
          in: path
          description: Topic id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Topics/{id}/blocks/count':
    get:
      tags:
        - Topic
      summary: Counts blocks of Topic.
      operationId: Topic.prototype.__count__blocks
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Topic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Topics:
    post:
      tags:
        - Topic
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Topic.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Topic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Topic'
      deprecated: false
    patch:
      tags:
        - Topic
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Topic.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Topic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Topic'
      deprecated: false
    put:
      tags:
        - Topic
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Topic.replaceOrCreate__put_Topics
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Topic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Topic'
      deprecated: false
    get:
      tags:
        - Topic
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Topic.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Topic'
      deprecated: false
  /Topics/replaceOrCreate:
    post:
      tags:
        - Topic
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Topic.replaceOrCreate__post_Topics_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Topic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Topic'
      deprecated: false
  /Topics/upsertWithWhere:
    post:
      tags:
        - Topic
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Topic.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Topic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Topic'
      deprecated: false
  '/Topics/{id}/exists':
    get:
      tags:
        - Topic
      summary: Check whether a model instance exists in the data source.
      operationId: 'Topic.exists__get_Topics_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Topics/{id}':
    head:
      tags:
        - Topic
      summary: Check whether a model instance exists in the data source.
      operationId: 'Topic.exists__head_Topics_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Topic
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Topic.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Topic'
      deprecated: false
    put:
      tags:
        - Topic
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Topic.replaceById__put_Topics_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Topic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Topic'
      deprecated: false
    delete:
      tags:
        - Topic
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Topic.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Topic
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Topic.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Topic'
        - name: id
          in: path
          description: Topic id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Topic'
      deprecated: false
  '/Topics/{id}/replace':
    post:
      tags:
        - Topic
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Topic.replaceById__post_Topics_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Topic'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Topic'
      deprecated: false
  /Topics/findOne:
    get:
      tags:
        - Topic
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Topic.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Topic'
      deprecated: false
  /Topics/update:
    post:
      tags:
        - Topic
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Topic.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Topic'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Topics/count:
    get:
      tags:
        - Topic
      summary: Count instances of the model matched by where from the data source.
      operationId: Topic.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Topics/my-remote:
    get:
      tags:
        - Topic
      operationId: Topic.myRemote
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: array
                items:
                  type: object
      deprecated: false
  /Topics/stats:
    get:
      tags:
        - Topic
      summary: Statistical information for Topic registers.
      operationId: Topic.stats
      parameters:
        - name: range
          in: query
          description: 'hourly, daily, weekly, monthly, yearly, custom'
          required: true
          type: string
        - name: custom
          in: query
          description: '{"start": date, "end": date }'
          required: false
          type: string
          format: JSON
        - name: where
          in: query
          description: 'where filter '
          required: false
          type: string
          format: JSON
        - name: groupBy
          in: query
          description: 'group by filter '
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  '/Blocks/{id}/blockContent':
    get:
      tags:
        - Block
      summary: Fetches belongsTo relation blockContent.
      operationId: Block.prototype.__get__blockContent
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Block id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PersistedModel'
      deprecated: false
  '/Blocks/{id}/topic':
    get:
      tags:
        - Block
      summary: Fetches belongsTo relation topic.
      operationId: Block.prototype.__get__topic
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Block id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Topic'
      deprecated: false
  /Blocks:
    post:
      tags:
        - Block
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Block.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
    patch:
      tags:
        - Block
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Block.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
    put:
      tags:
        - Block
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Block.replaceOrCreate__put_Blocks
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
    get:
      tags:
        - Block
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Block.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Block'
      deprecated: false
  /Blocks/replaceOrCreate:
    post:
      tags:
        - Block
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Block.replaceOrCreate__post_Blocks_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
  /Blocks/upsertWithWhere:
    post:
      tags:
        - Block
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Block.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
  '/Blocks/{id}/exists':
    get:
      tags:
        - Block
      summary: Check whether a model instance exists in the data source.
      operationId: 'Block.exists__get_Blocks_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Blocks/{id}':
    head:
      tags:
        - Block
      summary: Check whether a model instance exists in the data source.
      operationId: 'Block.exists__head_Blocks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Block
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Block.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
    put:
      tags:
        - Block
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Block.replaceById__put_Blocks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
    delete:
      tags:
        - Block
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Block.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Block
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Block.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Block'
        - name: id
          in: path
          description: Block id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
  '/Blocks/{id}/replace':
    post:
      tags:
        - Block
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Block.replaceById__post_Blocks_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
  /Blocks/findOne:
    get:
      tags:
        - Block
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Block.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Block'
      deprecated: false
  /Blocks/update:
    post:
      tags:
        - Block
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Block.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Block'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Blocks/count:
    get:
      tags:
        - Block
      summary: Count instances of the model matched by where from the data source.
      operationId: Block.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Blocks/my-remote:
    get:
      tags:
        - Block
      operationId: Block.myRemote
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: array
                items:
                  type: object
      deprecated: false
  /Blocks/stats:
    get:
      tags:
        - Block
      summary: Statistical information for Block registers.
      operationId: Block.stats
      parameters:
        - name: range
          in: query
          description: 'hourly, daily, weekly, monthly, yearly, custom'
          required: true
          type: string
        - name: custom
          in: query
          description: '{"start": date, "end": date }'
          required: false
          type: string
          format: JSON
        - name: where
          in: query
          description: 'where filter '
          required: false
          type: string
          format: JSON
        - name: groupBy
          in: query
          description: 'group by filter '
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  '/Members/{id}/accessTokens/{fk}':
    get:
      tags:
        - Member
      summary: Find a related item by id for accessTokens.
      operationId: Member.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Member
      summary: Delete a related item by id for accessTokens.
      operationId: Member.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Member
      summary: Update a related item by id for accessTokens.
      operationId: Member.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Members/{id}/topics/{fk}':
    get:
      tags:
        - Member
      summary: Find a related item by id for topics.
      operationId: Member.prototype.__findById__topics
      parameters:
        - name: fk
          in: path
          description: Foreign key for topics
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Topic'
      deprecated: false
    delete:
      tags:
        - Member
      summary: Delete a related item by id for topics.
      operationId: Member.prototype.__destroyById__topics
      parameters:
        - name: fk
          in: path
          description: Foreign key for topics
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Member
      summary: Update a related item by id for topics.
      operationId: Member.prototype.__updateById__topics
      parameters:
        - name: fk
          in: path
          description: Foreign key for topics
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Topic'
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Topic'
      deprecated: false
  '/Members/{id}/accessTokens':
    get:
      tags:
        - Member
      summary: Queries accessTokens of Member.
      operationId: Member.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Member
      summary: Creates a new instance in accessTokens of this model.
      operationId: Member.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Member
      summary: Deletes all accessTokens of this model.
      operationId: Member.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/accessTokens/count':
    get:
      tags:
        - Member
      summary: Counts accessTokens of Member.
      operationId: Member.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Members/{id}/topics':
    get:
      tags:
        - Member
      summary: Queries topics of Member.
      operationId: Member.prototype.__get__topics
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Topic'
      deprecated: false
    post:
      tags:
        - Member
      summary: Creates a new instance in topics of this model.
      operationId: Member.prototype.__create__topics
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Topic'
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Topic'
      deprecated: false
    delete:
      tags:
        - Member
      summary: Deletes all topics of this model.
      operationId: Member.prototype.__delete__topics
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/topics/count':
    get:
      tags:
        - Member
      summary: Counts topics of Member.
      operationId: Member.prototype.__count__topics
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Members:
    post:
      tags:
        - Member
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Member.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    patch:
      tags:
        - Member
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Member.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    put:
      tags:
        - Member
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Member.replaceOrCreate__put_Members
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    get:
      tags:
        - Member
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Member.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Member'
      deprecated: false
  /Members/replaceOrCreate:
    post:
      tags:
        - Member
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Member.replaceOrCreate__post_Members_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  /Members/upsertWithWhere:
    post:
      tags:
        - Member
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Member.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  '/Members/{id}/exists':
    get:
      tags:
        - Member
      summary: Check whether a model instance exists in the data source.
      operationId: 'Member.exists__get_Members_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Members/{id}':
    head:
      tags:
        - Member
      summary: Check whether a model instance exists in the data source.
      operationId: 'Member.exists__head_Members_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Member
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Member.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    put:
      tags:
        - Member
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Member.replaceById__put_Members_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    delete:
      tags:
        - Member
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Member.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Member
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Member.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Member'
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  '/Members/{id}/replace':
    post:
      tags:
        - Member
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Member.replaceById__post_Members_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  /Members/findOne:
    get:
      tags:
        - Member
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Member.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  /Members/update:
    post:
      tags:
        - Member
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Member.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Members/count:
    get:
      tags:
        - Member
      summary: Count instances of the model matched by where from the data source.
      operationId: Member.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Members/login:
    post:
      tags:
        - Member
      summary: Login a user with username/email and password.
      operationId: Member.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /Members/logout:
    post:
      tags:
        - Member
      summary: Logout a user with access token.
      operationId: Member.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/verify':
    post:
      tags:
        - Member
      summary: "Trigger user's identity verification with configured verifyOptions"
      operationId: Member.prototype.verify
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/confirm:
    get:
      tags:
        - Member
      summary: Confirm a user registration with identity verification token.
      operationId: Member.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/reset:
    post:
      tags:
        - Member
      summary: Reset password for a user with email.
      operationId: Member.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/change-password:
    post:
      tags:
        - Member
      summary: "Change a user's password."
      operationId: Member.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/reset-password:
    post:
      tags:
        - Member
      summary: "Reset user's password via a password-reset token."
      operationId: Member.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/my-remote:
    get:
      tags:
        - Member
      operationId: Member.myRemote
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: array
                items:
                  type: object
      deprecated: false
  /Members/stats:
    get:
      tags:
        - Member
      summary: Statistical information for Member registers.
      operationId: Member.stats
      parameters:
        - name: range
          in: query
          description: 'hourly, daily, weekly, monthly, yearly, custom'
          required: true
          type: string
        - name: custom
          in: query
          description: '{"start": date, "end": date }'
          required: false
          type: string
          format: JSON
        - name: where
          in: query
          description: 'where filter '
          required: false
          type: string
          format: JSON
        - name: groupBy
          in: query
          description: 'group by filter '
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  '/Polls/{id}/block':
    get:
      tags:
        - Poll
      summary: Fetches belongsTo relation block.
      operationId: Poll.prototype.__get__block
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Poll id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PersistedModel'
      deprecated: false
  '/Polls/{id}/votes/{fk}':
    get:
      tags:
        - Poll
      summary: Find a related item by id for votes.
      operationId: Poll.prototype.__findById__votes
      parameters:
        - name: fk
          in: path
          description: Foreign key for votes
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Poll id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Vote'
      deprecated: false
    delete:
      tags:
        - Poll
      summary: Delete a related item by id for votes.
      operationId: Poll.prototype.__destroyById__votes
      parameters:
        - name: fk
          in: path
          description: Foreign key for votes
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Poll id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Poll
      summary: Update a related item by id for votes.
      operationId: Poll.prototype.__updateById__votes
      parameters:
        - name: fk
          in: path
          description: Foreign key for votes
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Vote'
        - name: id
          in: path
          description: Poll id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Vote'
      deprecated: false
  '/Polls/{id}/votes':
    get:
      tags:
        - Poll
      summary: Queries votes of Poll.
      operationId: Poll.prototype.__get__votes
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Poll id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Vote'
      deprecated: false
    post:
      tags:
        - Poll
      summary: Creates a new instance in votes of this model.
      operationId: Poll.prototype.__create__votes
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Vote'
        - name: id
          in: path
          description: Poll id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Vote'
      deprecated: false
    delete:
      tags:
        - Poll
      summary: Deletes all votes of this model.
      operationId: Poll.prototype.__delete__votes
      parameters:
        - name: id
          in: path
          description: Poll id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Polls/{id}/votes/count':
    get:
      tags:
        - Poll
      summary: Counts votes of Poll.
      operationId: Poll.prototype.__count__votes
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Poll id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Polls:
    post:
      tags:
        - Poll
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Poll.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Poll'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Poll'
      deprecated: false
    patch:
      tags:
        - Poll
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Poll.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Poll'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Poll'
      deprecated: false
    put:
      tags:
        - Poll
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Poll.replaceOrCreate__put_Polls
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Poll'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Poll'
      deprecated: false
    get:
      tags:
        - Poll
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Poll.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Poll'
      deprecated: false
  /Polls/replaceOrCreate:
    post:
      tags:
        - Poll
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Poll.replaceOrCreate__post_Polls_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Poll'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Poll'
      deprecated: false
  /Polls/upsertWithWhere:
    post:
      tags:
        - Poll
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Poll.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Poll'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Poll'
      deprecated: false
  '/Polls/{id}/exists':
    get:
      tags:
        - Poll
      summary: Check whether a model instance exists in the data source.
      operationId: 'Poll.exists__get_Polls_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Polls/{id}':
    head:
      tags:
        - Poll
      summary: Check whether a model instance exists in the data source.
      operationId: 'Poll.exists__head_Polls_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Poll
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Poll.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Poll'
      deprecated: false
    put:
      tags:
        - Poll
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Poll.replaceById__put_Polls_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Poll'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Poll'
      deprecated: false
    delete:
      tags:
        - Poll
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Poll.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Poll
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Poll.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Poll'
        - name: id
          in: path
          description: Poll id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Poll'
      deprecated: false
  '/Polls/{id}/replace':
    post:
      tags:
        - Poll
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Poll.replaceById__post_Polls_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Poll'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Poll'
      deprecated: false
  /Polls/findOne:
    get:
      tags:
        - Poll
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Poll.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Poll'
      deprecated: false
  /Polls/update:
    post:
      tags:
        - Poll
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Poll.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Poll'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Polls/count:
    get:
      tags:
        - Poll
      summary: Count instances of the model matched by where from the data source.
      operationId: Poll.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Polls/stats:
    get:
      tags:
        - Poll
      summary: Statistical information for Poll registers.
      operationId: Poll.stats
      parameters:
        - name: range
          in: query
          description: 'hourly, daily, weekly, monthly, yearly, custom'
          required: true
          type: string
        - name: custom
          in: query
          description: '{"start": date, "end": date }'
          required: false
          type: string
          format: JSON
        - name: where
          in: query
          description: 'where filter '
          required: false
          type: string
          format: JSON
        - name: groupBy
          in: query
          description: 'group by filter '
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  '/Events/{id}/block':
    get:
      tags:
        - Event
      summary: Fetches belongsTo relation block.
      operationId: Event.prototype.__get__block
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Event id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PersistedModel'
      deprecated: false
  /Events:
    post:
      tags:
        - Event
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Event.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Event'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Event'
      deprecated: false
    patch:
      tags:
        - Event
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Event.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Event'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Event'
      deprecated: false
    put:
      tags:
        - Event
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Event.replaceOrCreate__put_Events
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Event'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Event'
      deprecated: false
    get:
      tags:
        - Event
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Event.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
      deprecated: false
  /Events/replaceOrCreate:
    post:
      tags:
        - Event
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Event.replaceOrCreate__post_Events_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Event'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Event'
      deprecated: false
  /Events/upsertWithWhere:
    post:
      tags:
        - Event
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Event.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Event'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Event'
      deprecated: false
  '/Events/{id}/exists':
    get:
      tags:
        - Event
      summary: Check whether a model instance exists in the data source.
      operationId: 'Event.exists__get_Events_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Events/{id}':
    head:
      tags:
        - Event
      summary: Check whether a model instance exists in the data source.
      operationId: 'Event.exists__head_Events_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Event
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Event.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Event'
      deprecated: false
    put:
      tags:
        - Event
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Event.replaceById__put_Events_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Event'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Event'
      deprecated: false
    delete:
      tags:
        - Event
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Event.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Event
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Event.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Event'
        - name: id
          in: path
          description: Event id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Event'
      deprecated: false
  '/Events/{id}/replace':
    post:
      tags:
        - Event
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Event.replaceById__post_Events_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Event'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Event'
      deprecated: false
  /Events/findOne:
    get:
      tags:
        - Event
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Event.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Event'
      deprecated: false
  /Events/update:
    post:
      tags:
        - Event
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Event.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Event'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Events/count:
    get:
      tags:
        - Event
      summary: Count instances of the model matched by where from the data source.
      operationId: Event.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Events/my-remote:
    get:
      tags:
        - Event
      operationId: Event.myRemote
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: array
                items:
                  type: object
      deprecated: false
  /Events/stats:
    get:
      tags:
        - Event
      summary: Statistical information for Event registers.
      operationId: Event.stats
      parameters:
        - name: range
          in: query
          description: 'hourly, daily, weekly, monthly, yearly, custom'
          required: true
          type: string
        - name: custom
          in: query
          description: '{"start": date, "end": date }'
          required: false
          type: string
          format: JSON
        - name: where
          in: query
          description: 'where filter '
          required: false
          type: string
          format: JSON
        - name: groupBy
          in: query
          description: 'group by filter '
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  Block:
    properties:
      value:
        $ref: '#/definitions/x-any'
      id:
        type: number
        format: double
      blockContentId:
        type: number
        format: double
      blockContentType:
        type: string
      topicId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  Member:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
      topicId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    required:
      - email
    additionalProperties: false
  Topic:
    properties:
      title:
        type: string
      text:
        type: string
      id:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      creatorId:
        type: number
        format: double
    additionalProperties: false
  PersistedModel:
    properties:
      id:
        type: number
        format: double
    additionalProperties: false
  Vote:
    properties:
      value:
        type: array
        items:
          type: number
          format: double
      id:
        type: number
        format: double
      pollId:
        type: number
        format: double
      voterId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    required:
      - value
    additionalProperties: false
  Poll:
    properties:
      text:
        type: string
      options:
        type: array
        items:
          $ref: '#/definitions/x-any'
      settings:
        default: {}
        type: object
      id:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      blockCOntentId:
        type: number
        format: double
      blockContentType:
        type: string
    required:
      - options
    additionalProperties: false
  Event:
    properties:
      startTime:
        type: string
        format: date-time
      endTime:
        type: string
        format: date-time
      locationText:
        type: string
      location:
        $ref: '#/definitions/GeoPoint'
      id:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      blockCOntentId:
        type: number
        format: double
      blockContentType:
        type: string
    required:
      - startTime
      - endTime
      - locationText
    additionalProperties: false
  GeoPoint:
    properties:
      lat:
        type: number
      lng:
        type: number
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: notes
  version: 1.0.0
  title: notes
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
